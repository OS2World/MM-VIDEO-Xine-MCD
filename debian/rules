#!/usr/bin/make -f
# Sample debian/rules that uses debhelper.
# GNU copyright 1997 to 1999 by Joey Hess.
# adapted for xine-lib 2001 by Siggi Langauf

# Uncomment this to turn on verbose mode.
#export DH_VERBOSE=1

# assuming created lib in src/xine-engine/.libs/libxine.so.<version>
version=`ls src/xine-engine/.libs/libxine*.so.* | \
 awk '{if (match($$0,/[0-9]+\.[0-9]+\.[0-9]+$$/)) print substr($$0,RSTART)}'`
major=`ls src/xine-engine/.libs/libxine*.so.* | \
 awk '{if (match($$0,/\.so\.[0-9]+$$/)) print substr($$0,RSTART+4)}'`

# These are used for cross-compiling and for saving the configure script
# from having to guess our platform (since we know it already)
DEB_HOST_GNU_TYPE   ?= $(shell dpkg-architecture -qDEB_HOST_GNU_TYPE)
DEB_BUILD_GNU_TYPE  ?= $(shell dpkg-architecture -qDEB_BUILD_GNU_TYPE)

CFLAGS += -g
ifneq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))
	CFLAGS += -O0
endif
INSTALL_TARGET := install
BUILD_TARGET := all
ifeq (,$(findstring nostrip,$(DEB_BUILD_OPTIONS)))
	INSTALL_TARGET := install-debug
	BUILD_TARGET := debug
endif

DEB_HOST_GNU_OPTION := 
# the "optimize" flag disables compatibility hacks
ifeq (,$(findstring optimize,$(DEB_BUILD_OPTIONS)))
 $(warning trying to disable machine-specific optimizations)
 $(warning add 'optimize' to DEB_BUILD_OPTIONS to enable them)
 DEB_HOST_GNU_TYPE := \
  $(shell echo $(DEB_HOST_GNU_TYPE)|sed -e 's/^alphaev56/alpha/')
 DEB_BUILD_GNU_TYPE := \
  $(shell echo $(DEB_BUILD_GNU_TYPE)|sed -e 's/^alphaev56/alpha/')
 #on intel architectures, xine probes CPU specific optimizations on runtime
 DEB_HOST_GNU_TYPE := \
  $(shell echo $(DEB_HOST_GNU_TYPE)|sed -e 's/^i.86/i686/')
 DEB_BUILD_GNU_TYPE := \
  $(shell echo $(DEB_BUILD_GNU_TYPE)|sed -e 's/^i.86/i686/')
 ifneq ($DEB_HOST_GNU_TYPE,$DEB_BUILD_GNU_TYPE)
  $(warning WARNING: cross compiling is not supported by xine)
  $(warning          using DEB_BUILD_GNU_TYPE = $(DEB_BUILD_GNU_TYPE))
  $(warning          ignoring DEB_HOST_GNU_TYPE = $(DEB_HOST_GNU_TYPE))
  DEB_HOST_GNU_TYPE := $(DEB_BUILD_GNU_TYPE)
 endif
 DEB_HOST_GNU_OPTION := --host=$(DEB_HOST_GNU_TYPE)
endif

configure: configure-stamp
configure-stamp:
	dh_testdir
	./configure --prefix=/usr --mandir=\$${prefix}/share/man \
                    $(DEB_HOST_GNU_OPTION)
	touch configure-stamp

build: configure-stamp build-stamp
build-stamp:
	dh_testdir

	$(MAKE)

	touch build-stamp

clean:
	dh_testdir
	dh_testroot
	rm -f build-stamp configure-stamp
	test -f Makefile && $(MAKE) distclean || true
	dh_clean

install: build
	dh_testdir
	dh_testroot
	dh_clean -k
	dh_installdirs

	$(MAKE) install DESTDIR=$(CURDIR)/debian/tmp \
			LIBRARY_PATH=$(CURDIR)/debian/tmp/usr/lib

binary-indep: build install
# We have nothing architecture-independant to do.


binary-arch: build install
	dh_testdir
	dh_testroot
	#
	# build libxine${major} package by moving files from libxine-dev
	#
	#dh_install --autodest --sourcedir=debian/tmp --list-missing
	dh_install --autodest --sourcedir=debian/tmp
	dh_installdocs
	dh_installchangelogs -k ChangeLog
	dh_link
	dh_strip
	dh_compress
	dh_fixperms
	dh_makeshlibs -V 'libxine1 (>= 1-rc0)'
	dh_installdeb
#	dh_shlibdeps
	chmod +x debian/shlibdeps.sh
	debian/shlibdeps.sh libxine${major}
	dh_gencontrol
	dh_md5sums
	dh_builddeb

binary: binary-indep binary-arch
.PHONY: build clean binary-indep binary-arch binary install configure
